{"version":3,"sources":["Setlist.js","Cardlist.js","App.js","serviceWorker.js","index.js"],"names":["Setlist","props","state","isLoaded","sets","undefined","loadSets","fetch","then","res","json","result","aSets","buildSetlist","data","setState","error","aFetchedSets","aSetsToExclude","aBasicSets","filter","oSet","bIncludeSet","forEach","sSetToExclude","name","includes","sort","a","b","Date","released_at","this","Select","id","map","MenuItem","onClick","onSetClicked","bind","code","value","card_count","Component","Cardlist","cards","set","aCardsWithImageUris","oCard","image_uris","normal","updatedCardBuffer","console","log","Grid","container","spacing","item","xs","className","src","alt","loadCards","Typography","variant","setlist","handleSetClicked","ReactDOM","render","document","getElementById","event","cardlist","App","rel","href","Container","maxWidth","direction","justify","alignItems","AppBar","position","color","Toolbar","Button","Boolean","window","location","hostname","match","StrictMode","navigator","serviceWorker","ready","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.b897e435.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport Select from '@material-ui/core/Select';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\n\r\nclass Setlist extends Component {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      isLoaded: false,\r\n      sets: undefined\r\n    };\r\n    this.loadSets();\r\n  }\r\n\r\n  loadSets() {\r\n    fetch(\"https://api.scryfall.com/sets\")\r\n      .then(res => res.json())\r\n      .then((result) => {\r\n        var aSets = this.buildSetlist(result.data);\r\n        this.setState({\r\n          isLoaded: true,\r\n          sets: aSets\r\n        });\r\n      },\r\n        (error) => {\r\n        })\r\n  }\r\n\r\n  buildSetlist(aFetchedSets) {\r\n    var aSetsToExclude = [\"Tokens\", \"Promos\", \"Oversized\"];\r\n\r\n    var aBasicSets = aFetchedSets.filter(function (oSet) {\r\n      var bIncludeSet = true;\r\n      // Check if set name contains one of the excluded strings\r\n      aSetsToExclude.forEach(sSetToExclude => {\r\n        // If yes -> remove\r\n        if (oSet.name.includes(sSetToExclude)) {\r\n          bIncludeSet = false;\r\n        }\r\n      });\r\n\r\n      return bIncludeSet;\r\n    });\r\n\r\n    aBasicSets.sort(function(a,b){\r\n      return new Date(b.released_at) - new Date(a.released_at);\r\n    });\r\n\r\n    return aBasicSets;\r\n  }\r\n\r\n  render() {\r\n    if (!this.state.isLoaded) {\r\n      return <span>Loading...</span>\r\n    }\r\n\r\n    else {\r\n      return (\r\n        <Select id=\"Set-select\">\r\n          {this.state.sets.map((oSet) => {\r\n            return (\r\n              <MenuItem onClick={this.props.onSetClicked.bind(this, oSet.code)} value={oSet.code}>{oSet.name} ({oSet.card_count})</MenuItem>\r\n            );\r\n          })}\r\n        </Select>\r\n      );\r\n    }\r\n  }\r\n}\r\n\r\nexport default Setlist;","import React, { Component } from 'react';\nimport Grid from '@material-ui/core/Grid';\nimport Typography from '@material-ui/core/Typography';\n\nclass Cardlist extends Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      cards: {}\n    };\n  }\n\n  loadCards(set) {\n    fetch(\"https://api.scryfall.com/cards/search?order=set&q=set:\" + set)\n      .then(res => res.json())\n      .then((result) => {\n        // Only consider cards with images\n        var aCardsWithImageUris = result.data.filter(function (oCard) {\n          return (oCard && oCard.image_uris && oCard.image_uris.normal)\n        });\n\n        // Read old card buffer\n        var updatedCardBuffer = this.state.cards;\n\n        // Update card buffer with newly fetched cards\n        updatedCardBuffer[set] = aCardsWithImageUris;\n\n        this.setState({\n          cards: updatedCardBuffer\n        });\n      })\n  }\n\n  render() {\n    // No buffered cards found -> Start async load (function loadCards) and return loading message\n    if (!this.state.cards[this.props.set]) {\n      console.log(\"Fetch set from network: \" + this.props.set);\n      this.loadCards(this.props.set);\n      return <Typography variant=\"h4\">Loading Set: {this.props.set}...</Typography>;\n    }\n\n    // Loaded\n    else {\n      console.log(\"Render set from buffer: \" + this.props.set);\n      return (\n        <div>\n          <Grid container spacing={2}>\n            {this.state.cards[this.props.set].map((oCard) => (\n              <Grid item xs={2}>\n                <img className=\"Img-card\" src={oCard.image_uris.normal} alt={oCard.name} />\n              </Grid>\n            ))}\n          </Grid>\n        </div>\n      );\n    }\n  }\n}\n\nexport default Cardlist;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './App.css';\nimport Button from '@material-ui/core/Button';\nimport Container from '@material-ui/core/Container';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Setlist from './Setlist.js';\nimport Cardlist from './Cardlist.js';\nimport Grid from '@material-ui/core/Grid';\n\nfunction loadSets() {\n  const setlist = <Setlist onSetClicked={handleSetClicked}></Setlist>\n  ReactDOM.render(setlist, document.getElementById('App-sets'));\n}\n\nfunction handleSetClicked(code, event) {\n  var cardlist = <Cardlist set={code}></Cardlist>;\n  ReactDOM.render(cardlist, document.getElementById(\"App-cards\"));\n}\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <link rel=\"stylesheet\" href=\"https://fonts.googleapis.com/css?family=Roboto:300,400,500,700&display=swap\" />\n      <link rel=\"stylesheet\" href=\"https://fonts.googleapis.com/icon?family=Material+Icons\" />\n      <Container maxWidth={false}>\n\n        <Grid container direction=\"column\" justify=\"flex-start\" alignItems=\"stretch\">\n\n          <AppBar position=\"sticky\" color=\"default\">\n            <Toolbar>\n              <Button variant=\"contained\" onClick={loadSets}>\n                Load Sets\n            </Button>\n              <div id=\"App-sets\" className=\"App-sets\"></div>\n            </Toolbar>\n          </AppBar>\n\n          <div id=\"App-content\" className=\"App-content\">\n            <Grid container direction=\"row\" justify=\"center\" alignItems=\"flex-start\" spacing={3}>\n              <Grid item xs={12}>\n                <div id=\"App-cards\" className=\"App-cards\">\n                </div>\n              </Grid>\n            </Grid>\n          </div>\n\n        </Grid>\n\n      </Container>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}