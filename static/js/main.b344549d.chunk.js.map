{"version":3,"sources":["CardAPI.js","Setlist.js","Cardlist.js","AppContent.js","App.js","serviceWorker.js","index.js"],"names":["singletonCardAPI","this","sets","undefined","aFetchedSets","aSetsToExclude","filter","oSet","bIncludeSet","forEach","sSetToExclude","name","includes","newSet","buildSetlist","Setlist","props","state","isLoaded","onSetClicked","loadSets","fetch","then","res","json","result","cardAPI","Sets","data","setState","error","length","map","key","code","onClick","bind","src","icon_svg_uri","alt","width","height","Component","Cardlist","cards","set","nextProps","nextState","aCardsWithImageUris","oCard","image_uris","normal","id","class","loadCards","AppContent","event","console","log","cardlist","ReactDOM","render","document","getElementById","className","handleSetClicked","displayAppContent","appContent","App","value","Boolean","window","location","hostname","match","StrictMode","navigator","serviceWorker","ready","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.b344549d.chunk.js","sourcesContent":["class CardAPI {\n  constructor() {\n    this.sets = undefined;\n  }\n\n  set Sets(newSet) {\n    this.sets = this.buildSetlist(newSet);\n  }\n\n  get Sets() {\n    return this.sets;\n  }\n\n  buildSetlist(aFetchedSets) {\n    var aSetsToExclude = [\"Tokens\", \"Promos\", \"Oversized\"];\n\n    var aBasicSets = aFetchedSets.filter(function (oSet) {\n      var bIncludeSet = true;\n      // Check if set name contains one of the excluded strings\n      aSetsToExclude.forEach(sSetToExclude => {\n        // If yes -> remove\n        if (oSet.name.includes(sSetToExclude)) {\n          bIncludeSet = false;\n        }\n      });\n\n      return bIncludeSet;\n    });\n\n    return aBasicSets;\n  }\n}\n\nconst singletonCardAPI = new CardAPI();\n\nexport default singletonCardAPI;","import React, { Component } from 'react';\nimport cardAPI from './CardAPI.js'\n\nclass Setlist extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      isLoaded: false,\n      sets: undefined\n    };\n    this.onSetClicked = props.onSetClicked;\n    this.loadSets();\n  }\n\n  loadSets() {\n    fetch(\"https://api.scryfall.com/sets\")\n      .then(res => res.json())\n      .then((result) => {\n        cardAPI.Sets = result.data;\n        this.setState({\n          isLoaded: true,\n          sets: cardAPI.Sets\n        });\n      },\n        (error) => {\n          this.setState({\n            isLoaded: true\n          });\n        })\n  }\n\n  render() {\n    if (!this.state.isLoaded) {\n      return <h1>I am an unloaded Setlist! :-(</h1>\n    }\n\n    else {\n      return (\n        <div>\n          <h1>Found Sets: {this.state.sets.length}</h1>\n          <ul>\n            {this.state.sets.map((oSet) => {\n              return (\n                <li key={oSet.code}>\n                  <button onClick={this.onSetClicked.bind(this, oSet.code)}>\n                    <img src={oSet.icon_svg_uri} alt={oSet.code} width={20} height={20} />\n                    <span>{\" \" + oSet.name}</span>\n                  </button>\n                </li>);\n            })}\n          </ul>\n        </div>\n      );\n    }\n  }\n}\n\nexport default Setlist;","import React, { Component } from 'react';\n\nclass Cardlist extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      cards: undefined\n    };\n  }\n\n  loadCards(set) {\n    fetch(\"https://api.scryfall.com/cards/search?order=set&q=set:\" + set)\n      .then(res => res.json())\n      .then((result) => {\n        this.setState({\n          cards: result.data\n        });\n      },\n        (error) => {\n        })\n  }\n\n  shouldComponentUpdate(nextProps, nextState) {\n    if (nextProps.set !== this.props.set) {\n      return true;\n    }\n\n    if (nextState.cards === undefined) {\n      return false;\n    }\n\n    return true;\n  }\n\n  render() {\n    // Initial rendering without set\n    if (!this.props.set) {\n      return <h1>I am an unloaded Cardlist :-(</h1>;\n    }\n\n    // A set prop has been specified\n    else {\n      // Not yet loaded -> Start async load (function loadCards) and return loading message\n      if (!this.state.cards) {\n        this.loadCards(this.props.set);\n        return <h1>Loading Set: {this.props.set}...</h1>;\n      }\n\n      // Loaded\n      else {\n        var aCardsWithImageUris = this.state.cards.filter(function (oCard) {\n          return (oCard && oCard.image_uris && oCard.image_uris.normal)\n        });\n\n        this.setState({\n          cards: undefined\n        });\n\n        return (\n          <div>\n            <h1>Set {this.props.set}: {aCardsWithImageUris.length} cards</h1>\n            <ul>\n              {aCardsWithImageUris.map((oCard) => {\n                return (\n                  <li key={oCard.id} class=\"Card\">\n                    <img src={oCard.image_uris.normal} alt={oCard.name} />\n                  </li>\n                );\n              })}\n            </ul>\n          </div>\n        );\n      }\n    }\n  }\n}\n\nexport default Cardlist;","import React, { Component } from 'react';\nimport ReactDOM from 'react-dom';\nimport Setlist from './Setlist.js';\nimport Cardlist from './Cardlist.js';\n\nclass AppContent extends Component {\n  handleSetClicked(code, event) {\n    console.log(\"AppContent: Set clicked!\");\n\n    var cardlist = <Cardlist set={code}></Cardlist>;\n    ReactDOM.render(cardlist, document.getElementById(\"App-cards\"));\n  }\n\n  render() {\n    return (\n      <div id=\"App-content\" className=\"App-content\">\n        <div id=\"App-sets\" className=\"App-sets\">\n          <Setlist onSetClicked={this.handleSetClicked}></Setlist>\n        </div>\n\n        <div id=\"App-cards\" className=\"App-cards\">\n\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default AppContent;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport AppContent from './AppContent.js';\nimport './App.css';\n\nfunction displayAppContent() {\n  const appContent = <AppContent></AppContent>;\n  ReactDOM.render(appContent, document.getElementById('App-content'));\n}\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <button value=\"Display Sets\"\n          onClick={displayAppContent}\n        >Display Sets</button>\n      </header>\n      <div id=\"App-content\" className=\"App-content\"></div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}