{"version":3,"sources":["CardAPI.js","Setlist.js","App.js","serviceWorker.js","index.js"],"names":["singletonCardAPI","this","sets","undefined","aFetchedSets","aSetsToExclude","filter","oSet","bIncludeSet","forEach","sSetToExclude","name","includes","newSet","buildSetlist","Setlist","props","state","isLoaded","loadSets","fetch","then","res","json","result","cardAPI","Sets","data","setState","error","length","map","key","code","src","icon_svg_uri","alt","width","height","Component","displaySets","element","ReactDOM","render","document","getElementById","App","className","value","onClick","id","Boolean","window","location","hostname","match","StrictMode","navigator","serviceWorker","ready","registration","unregister","catch","console","message"],"mappings":"sOAmCeA,EAFU,I,WAhCvB,aAAe,oBACbC,KAAKC,UAAOC,E,yDAWDC,GACX,IAAIC,EAAiB,CAAC,SAAU,SAAU,aAe1C,OAbiBD,EAAaE,QAAO,SAAUC,GAC7C,IAAIC,GAAc,EASlB,OAPAH,EAAeI,SAAQ,SAAAC,GAEjBH,EAAKI,KAAKC,SAASF,KACrBF,GAAc,MAIXA,O,yBArBFK,GACPZ,KAAKC,KAAOD,KAAKa,aAAaD,I,eAI9B,OAAOZ,KAAKC,S,MCwCDa,E,kDA9Cb,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IACDC,MAAQ,CACXC,UAAU,EACVhB,UAAMC,GAER,EAAKgB,WANY,E,uDASP,IAAD,OACTC,MAAM,iCACHC,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAACG,GACHC,EAAQC,KAAOF,EAAOG,KACtB,EAAKC,SAAS,CACZV,UAAU,EACVhB,KAAMuB,EAAQC,UAGlB,SAACG,GACC,EAAKD,SAAS,CACZV,UAAU,S,+BAMlB,OAAKjB,KAAKgB,MAAMC,SAMZ,6BACE,2CAAiBjB,KAAKgB,MAAMf,KAAK4B,QACjC,4BACG7B,KAAKgB,MAAMf,KAAK6B,KAAI,SAACxB,GACpB,OAAO,wBAAIyB,IAAKzB,EAAK0B,MAAM,yBAAKC,IAAK3B,EAAK4B,aAAcC,IAAK7B,EAAK0B,KAAMI,MAAO,GAAIC,OAAQ,KAAM,8BAAO,IAAM/B,EAAKI,YATpH,iE,GA7BS4B,a,MCEtB,SAASC,IACP,IAAMC,EAAU,kBAAC,EAAD,MAChBC,IAASC,OAAOF,EAASG,SAASC,eAAe,aACjDH,IAASC,OAAOF,EAASG,SAASC,eAAe,cAmBpCC,MAhBf,WACE,OACE,yBAAKC,UAAU,OACb,4BAAQA,UAAU,cAChB,4BAAQC,MAAM,eACZC,QAAST,GADX,iBAIF,yBAAKU,GAAG,cAAcH,UAAU,eAChC,yBAAKG,GAAG,WAAWH,UAAU,aAC7B,yBAAKG,GAAG,YAAYH,UAAU,iBCThBI,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNb,IAASC,OACP,kBAAC,IAAMa,WAAP,KACE,kBAAC,EAAD,OAEFZ,SAASC,eAAe,SDyHpB,kBAAmBY,WACrBA,UAAUC,cAAcC,MACrBtC,MAAK,SAAAuC,GACJA,EAAaC,gBAEdC,OAAM,SAAAjC,GACLkC,QAAQlC,MAAMA,EAAMmC,a","file":"static/js/main.ee0113af.chunk.js","sourcesContent":["class CardAPI {\n  constructor() {\n    this.sets = undefined;\n  }\n\n  set Sets(newSet) {\n    this.sets = this.buildSetlist(newSet);\n  }\n\n  get Sets() {\n    return this.sets;\n  }\n\n  buildSetlist(aFetchedSets) {\n    var aSetsToExclude = [\"Tokens\", \"Promos\", \"Oversized\"];\n\n    var aBasicSets = aFetchedSets.filter(function (oSet) {\n      var bIncludeSet = true;\n      // Check if set name contains one of the excluded strings\n      aSetsToExclude.forEach(sSetToExclude => {\n        // If yes -> remove\n        if (oSet.name.includes(sSetToExclude)) {\n          bIncludeSet = false;\n        }\n      });\n\n      return bIncludeSet;\n    });\n\n    return aBasicSets;\n  }\n}\n\nconst singletonCardAPI = new CardAPI();\n\nexport default singletonCardAPI;","import React, { Component } from 'react';\nimport cardAPI from './CardAPI.js'\n\nclass Setlist extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      isLoaded: false,\n      sets: undefined\n    };\n    this.loadSets();\n  }\n\n  loadSets() {\n    fetch(\"https://api.scryfall.com/sets\")\n      .then(res => res.json())\n      .then((result) => {\n          cardAPI.Sets = result.data;\n          this.setState({\n            isLoaded: true,\n            sets: cardAPI.Sets\n          });\n        },\n        (error) => {\n          this.setState({\n            isLoaded: true\n          });\n        })\n  }\n\n  render() {\n    if (!this.state.isLoaded) {\n      return <h1>I am an unloaded Setlist! :-(</h1>\n    }\n\n    else {    \n      return (\n        <div>\n          <h1>Found Sets: {this.state.sets.length}</h1>\n          <ul>\n            {this.state.sets.map((oSet) => {\n              return <li key={oSet.code}><img src={oSet.icon_svg_uri} alt={oSet.code} width={20} height={20} /><span>{\" \" + oSet.name}</span></li>\n            })}\n          </ul>\n        </div>\n      );\n    }\n  }\n}\n\nexport default Setlist;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport Setlist from './Setlist.js';\nimport './App.css';\n\nfunction displaySets() {\n  const element = <Setlist></Setlist>\n  ReactDOM.render(element, document.getElementById('App-sets'));\n  ReactDOM.render(element, document.getElementById('App-cards'));\n}\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <button value=\"Display Sets\"\n          onClick={displaySets}\n        >Display Sets</button>\n      </header>\n      <div id=\"App-content\" className=\"App-content\">\n      <div id=\"App-sets\" className=\"App-sets\"></div>\n      <div id=\"App-cards\" className=\"App-cards\"></div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}