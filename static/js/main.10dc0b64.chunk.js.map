{"version":3,"sources":["Setlist.js","Cardlist.js","AppContent.js","App.js","serviceWorker.js","index.js"],"names":["Setlist","props","state","isLoaded","sets","undefined","loadSets","fetch","then","res","json","result","aSets","buildSetlist","data","setState","error","aFetchedSets","aSetsToExclude","filter","oSet","bIncludeSet","forEach","sSetToExclude","name","includes","this","Typography","variant","length","map","key","code","onClick","onSetClicked","bind","src","icon_svg_uri","alt","width","height","Component","Cardlist","cards","set","aCardsWithImageUris","oCard","image_uris","normal","updatedCardBuffer","console","log","Grid","container","spacing","item","xs","className","loadCards","AppContent","event","cardlist","ReactDOM","render","document","getElementById","id","direction","justify","alignItems","handleSetClicked","displayAppContent","appContent","App","rel","href","Container","maxWidth","Button","color","Boolean","window","location","hostname","match","StrictMode","navigator","serviceWorker","ready","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.10dc0b64.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport Typography from '@material-ui/core/Typography';\n\nclass Setlist extends Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      isLoaded: false,\n      sets: undefined\n    };\n    this.loadSets();\n  }\n\n  loadSets() {\n    fetch(\"https://api.scryfall.com/sets\")\n      .then(res => res.json())\n      .then((result) => {\n        var aSets = this.buildSetlist(result.data);\n        this.setState({\n          isLoaded: true,\n          sets: aSets\n        });\n      },\n        (error) => {\n        })\n  }\n\n  buildSetlist(aFetchedSets) {\n    var aSetsToExclude = [\"Tokens\", \"Promos\", \"Oversized\"];\n\n    var aBasicSets = aFetchedSets.filter(function (oSet) {\n      var bIncludeSet = true;\n      // Check if set name contains one of the excluded strings\n      aSetsToExclude.forEach(sSetToExclude => {\n        // If yes -> remove\n        if (oSet.name.includes(sSetToExclude)) {\n          bIncludeSet = false;\n        }\n      });\n\n      return bIncludeSet;\n    });\n\n    return aBasicSets;\n  }\n\n  render() {\n    if (!this.state.isLoaded) {\n      return <Typography variant=\"h2\">I am an unloaded Setlist! :-(</Typography>\n    }\n\n    else {\n      return (\n        <div>\n        <Typography variant=\"h2\">Found Sets: {this.state.sets.length}</Typography>\n          <ul>\n            {this.state.sets.map((oSet) => {\n              return (\n                <li key={oSet.code}>\n                  <button onClick={this.props.onSetClicked.bind(this, oSet.code)}>\n                    <img src={oSet.icon_svg_uri} alt={oSet.code} width={20} height={20} />\n                    <span>{\" \" + oSet.name}</span>\n                  </button>\n                </li>);\n            })}\n          </ul>\n        </div>\n      );\n    }\n  }\n}\n\nexport default Setlist;","import React, { Component } from 'react';\nimport GridList from '@material-ui/core/GridList';\nimport GridListTile from '@material-ui/core/GridListTile';\nimport Grid from '@material-ui/core/Grid';\nimport Typography from '@material-ui/core/Typography';\n\nclass Cardlist extends Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      cards: {}\n    };\n  }\n\n  loadCards(set) {\n    fetch(\"https://api.scryfall.com/cards/search?order=set&q=set:\" + set)\n      .then(res => res.json())\n      .then((result) => {\n        // Only consider cards with images\n        var aCardsWithImageUris = result.data.filter(function (oCard) {\n          return (oCard && oCard.image_uris && oCard.image_uris.normal)\n        });\n\n        // Read old card buffer\n        var updatedCardBuffer = this.state.cards;\n\n        // Update card buffer with newly fetched cards\n        updatedCardBuffer[set] = aCardsWithImageUris;\n\n        this.setState({\n          cards: updatedCardBuffer\n        });\n      })\n  }\n\n  render() {\n    // No buffered cards found -> Start async load (function loadCards) and return loading message\n    if (!this.state.cards[this.props.set]) {\n      console.log(\"Fetch set from network: \" + this.props.set);\n      this.loadCards(this.props.set);\n      return <Typography variant=\"h2\">Loading Set: {this.props.set}...</Typography>;\n    }\n\n    // Loaded\n    else {\n      console.log(\"Render set from buffer: \" + this.props.set);\n      return (\n        <div>\n          <Typography variant=\"h2\">\n          Set {this.props.set}: {this.state.cards[this.props.set].length} cards\n          </Typography>\n          <h1></h1>\n          <Grid container spacing={1}>\n            {this.state.cards[this.props.set].map((oCard) => (\n              <Grid item xs={3}>\n                <img className=\"Img-card\" src={oCard.image_uris.normal} alt={oCard.name} />\n              </Grid>\n            ))}\n          </Grid>\n        </div>\n      );\n    }\n  }\n}\n\nexport default Cardlist;","import React, { Component } from 'react';\nimport ReactDOM from 'react-dom';\nimport Setlist from './Setlist.js';\nimport Cardlist from './Cardlist.js';\nimport Grid from '@material-ui/core/Grid';\n\nclass AppContent extends Component {\n  handleSetClicked(code, event) {\n    var cardlist = <Cardlist set={code}></Cardlist>;\n    ReactDOM.render(cardlist, document.getElementById(\"App-cards\"));\n  }\n\n  render() {\n    return (\n\n      <div id=\"App-content\" className=\"App-content\">\n        <Grid\n          container\n          direction=\"row\"\n          justify=\"center\"\n          alignItems=\"flex-start\"\n          spacing={3}\n        >\n          <Grid item xs={2}>\n            <div id=\"App-sets\" className=\"App-sets\">\n              <Setlist onSetClicked={this.handleSetClicked}></Setlist>\n            </div>\n          </Grid>\n\n\n          <Grid item xs={10}>\n            <div id=\"App-cards\" className=\"App-cards\">\n            </div>\n          </Grid>\n\n\n        </Grid>\n      </div>\n    );\n  }\n}\n\nexport default AppContent;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport AppContent from './AppContent.js';\nimport './App.css';\nimport Button from '@material-ui/core/Button';\nimport Container from '@material-ui/core/Container';\n\nfunction displayAppContent() {\n  const appContent = <AppContent></AppContent>;\n  ReactDOM.render(appContent, document.getElementById('App-content'));\n}\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <link rel=\"stylesheet\" href=\"https://fonts.googleapis.com/css?family=Roboto:300,400,500,700&display=swap\" />\n      <link rel=\"stylesheet\" href=\"https://fonts.googleapis.com/icon?family=Material+Icons\" />\n      <Container maxWidth=\"100%\">\n      <header className=\"App-header\">\n        <Button variant=\"contained\" color=\"primary\" onClick={displayAppContent}>\n          Display Sets\n        </Button>\n      </header>\n      <div id=\"App-content\" className=\"App-content\"></div>\n      </Container>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}